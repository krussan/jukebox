package se.qxx.jukebox.domain.dao;

import se.qxx.dao.db.Cursor;
import se.qxx.dao.db.SQLiteDatabase;
import se.qxx.dao.db.SQLiteStatement;

import se.qxx.dao.AbstractDao;
import se.qxx.dao.Property;
import se.qxx.dao.internal.DaoConfig;

import se.qxx.jukebox.domain.JukeboxDomain.Movie;
import se.qxx.jukebox.domain.JukeboxDomain.Movie.Builder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MOVIE.
*/
public class MovieDao extends AbstractDao<Movie, Void> {

    public static final String TABLENAME = "MOVIE";

    /**
     * Properties of entity Movie.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Year = new Property(0, Integer.class, "Year", false, "YEAR");
        public final static Property ID = new Property(1, Integer.class, "ID", false, "ID");
        public final static Property Duration = new Property(2, Integer.class, "Duration", false, "DURATION");
        public final static Property IdentifierRating = new Property(3, Integer.class, "IdentifierRating", false, "IDENTIFIER_RATING");
        public final static Property Episode = new Property(4, Integer.class, "Episode", false, "EPISODE");
        public final static Property FirstAirDate = new Property(5, Long.class, "FirstAirDate", false, "FIRST_AIR_DATE");
    };


    public MovieDao(DaoConfig config) {
        super(config);
    }
    
    public MovieDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MOVIE' (" + //
                "'YEAR' INTEGER," + // 0: Year
                "'ID' INTEGER," + // 1: ID
                "'DURATION' INTEGER," + // 2: Duration
                "'IDENTIFIER_RATING' INTEGER," + // 3: IdentifierRating
                "'EPISODE' INTEGER," + // 4: Episode
                "'FIRST_AIR_DATE' INTEGER);"); // 5: FirstAirDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MOVIE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Movie entity) {
        stmt.clearBindings();
        if(entity.hasYear()) {
            stmt.bindLong(1, entity.getYear());
        }
        if(entity.hasID()) {
            stmt.bindLong(2, entity.getID());
        }
        if(entity.hasDuration()) {
            stmt.bindLong(3, entity.getDuration());
        }
        if(entity.hasIdentifierRating()) {
            stmt.bindLong(4, entity.getIdentifierRating());
        }
        if(entity.hasEpisode()) {
            stmt.bindLong(5, entity.getEpisode());
        }
        if(entity.hasFirstAirDate()) {
            stmt.bindLong(6, entity.getFirstAirDate());
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Movie readEntity(Cursor cursor, int offset) {
        Builder builder = Movie.newBuilder();
        if (!cursor.isNull(offset + 0)) {
            builder.setYear(cursor.getInt(offset + 0));
        }
        if (!cursor.isNull(offset + 1)) {
            builder.setID(cursor.getInt(offset + 1));
        }
        if (!cursor.isNull(offset + 2)) {
            builder.setDuration(cursor.getInt(offset + 2));
        }
        if (!cursor.isNull(offset + 3)) {
            builder.setIdentifierRating(cursor.getInt(offset + 3));
        }
        if (!cursor.isNull(offset + 4)) {
            builder.setEpisode(cursor.getInt(offset + 4));
        }
        if (!cursor.isNull(offset + 5)) {
            builder.setFirstAirDate(cursor.getLong(offset + 5));
        }
        return builder.build();
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Movie entity, int offset) {
        throw new UnsupportedOperationException("Protobuf objects cannot be modified");
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Movie entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Movie entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return false;
    }
    
}
