package se.qxx.jukebox.domain.dao;

import se.qxx.dao.db.Cursor;
import se.qxx.dao.db.SQLiteDatabase;
import se.qxx.dao.db.SQLiteStatement;

import se.qxx.dao.AbstractDao;
import se.qxx.dao.Property;
import se.qxx.dao.internal.DaoConfig;

import se.qxx.jukebox.domain.JukeboxDomain.Season;
import se.qxx.jukebox.domain.JukeboxDomain.Season.Builder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SEASON.
*/
public class SeasonDao extends AbstractDao<Season, Void> {

    public static final String TABLENAME = "SEASON";

    /**
     * Properties of entity Season.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ID = new Property(0, Integer.class, "ID", false, "ID");
    };


    public SeasonDao(DaoConfig config) {
        super(config);
    }
    
    public SeasonDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SEASON' (" + //
                "'ID' INTEGER);"); // 0: ID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SEASON'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Season entity) {
        stmt.clearBindings();
        if(entity.hasID()) {
            stmt.bindLong(1, entity.getID());
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Season readEntity(Cursor cursor, int offset) {
        Builder builder = Season.newBuilder();
        if (!cursor.isNull(offset + 0)) {
            builder.setID(cursor.getInt(offset + 0));
        }
        return builder.build();
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Season entity, int offset) {
        throw new UnsupportedOperationException("Protobuf objects cannot be modified");
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Season entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Season entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return false;
    }
    
}
