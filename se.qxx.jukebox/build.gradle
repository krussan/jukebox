plugins {
   id 'java'
   id 'idea'
   id 'com.github.jacobono.jaxb'
   id 'com.github.ksoichiro.build.info'
}

group = 'se.qxx.jukebox'
version = "${jukeboxVersion}"

ext {
   outputDir = new File("${buildDir}/outputs")
}

task myCopyTask(type: Copy) {
   if(!outputDir.exists())
      outputDir.mkdirs()

   from (projectDir) {
      include 'JukeboxSettings.xml'
      include 'imdb.xml'
      include 'parser.xml'
      include 'subs.xml'
      include 'logging.properties'
   }
   into outputDir
}

compileJava {
   sourceCompatibility = 11
   targetCompatibility = 11

   dependsOn xjc
   dependsOn myCopyTask
}

sourceSets {
   main {
      java {
         srcDirs = ['src/main/java', 'build/generated/sources']
      }
      resources {
         srcDirs = ['src/main/resources', 'src/main/native']
      }
   }
   test {
      java {
         srcDirs = ['src/test/java', 'build/generated/sources']
      }
      resources {
         srcDirs = ['src/test/resources']
      }
   }
}

jar {
   manifest {
      attributes(
         'Main-Class': 'se.qxx.jukebox.Jukebox'
      )
   }
}

task fatJar(type: Jar) {
   manifest.from jar.manifest
   destinationDirectory = outputDir
   classifier = 'all'
   from {
      configurations.runtimeClasspath
        .filter( {! (it.name =~ /sisu-guice.*\.jar/ || it.name =~ /git-commit-id.*\.jar/)})
        .collect { it.isDirectory() ? it : zipTree(it) }
   } {
      exclude "META-INF/*.SF"
      exclude "META-INF/*.DSA"
      exclude "META-INF/*.RSA"
   }
   with jar
}

jaxb {
   xsdDir 'se.qxx.jukebox/src/main/xsds'

   xjc {
      destinationDir 'build/generated/sources'
      generatePackage 'se.qxx.jukebox.settings'
   }
}

dependencies {
   implementation project(':se.qxx.jukebox.domain')
   implementation 'com.google.protobuf:protobuf-java:3.9.0'
   implementation 'org.apache.commons:commons-lang3:3.9'
   implementation 'se.qxx.protodb:protodb-java:2.5.4'
   implementation 'commons-io:commons-io:2.5'
   implementation 'uk.co.caprica:vlcj:3.10.1'
   implementation 'org.imgscalr:imgscalr-lib:4.2'
   implementation 'org.xerial:sqlite-jdbc:3.8.11.2'
   implementation 'mysql:mysql-connector-java:5.1.45'
   implementation 'org.nanohttpd:nanohttpd-webserver:2.3.1'
   implementation 'fr.noop:subtitle:0.9.6'
   implementation 'org.freemarker:freemarker:2.3.23'
   implementation 'org.jsoup:jsoup:1.11.2'
//   implementation 'pl.project13.maven:git-commit-id-plugin:2.2.2'
   implementation 'com.matthewn4444:embl-java:1.0.0'
   implementation 'net.bramp.ffmpeg:ffmpeg:0.6.2'
   implementation 'net.java.dev.jna:jna:4.2.2'
   implementation 'com.google.inject:guice:4.2.2'
   implementation 'com.google.inject.extensions:guice-assistedinject:4.1.0'
   implementation 'com.google.guava:guava:24.1-jre'
   implementation 'org.apache.commons:commons-text:1.1'
   implementation "javax.annotation:javax.annotation-api:1.3.1"
   implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.3.0"
   implementation "com.fasterxml.jackson.core:jackson-databind:2.6.4"

   // should be added by protodb dependency but is missing
   implementation "commons-codec:commons-codec:1.11"


   // runtime

   implementation 'com.sun.activation:jakarta.activation:1.2.1'

   // grpc
   implementation "io.grpc:grpc-netty-shaded:${grpcVersion}"
   implementation "io.grpc:grpc-protobuf:${grpcVersion}"
   implementation "io.grpc:grpc-stub:${grpcVersion}"

   // jaxb
   jaxb 'com.sun.xml.bind:jaxb-xjc:2.2.7-b41'
   implementation 'com.sun.xml.bind:jaxb-impl:2.2.7-b41'
   implementation 'javax.xml.bind:jaxb-api:2.3.0'
   jaxb 'com.sun.xml.bind:jaxb-impl:2.2.7-b41'
   jaxb 'javax.xml.bind:jaxb-api:2.3.0'
   jaxb 'org.glassfish.jaxb:jaxb-runtime:2.3.2'
   jaxb 'javax.activation:javax.activation-api:1.2.0'

   // test
   testImplementation 'junit:junit:4.12'
   testImplementation 'org.mockito:mockito-core:2.20.0'
}

artifacts {
   archives fatJar
}

task createScripts()  {
   doLast {
      new File(outputDir, "run.sh").text = """#!/bin/sh
if [ -n "\$LD_LIBRARY_PATH" ]
then
   LD_LIBRARY_PATH=\$PWD:\${LD_LIBRARY_PATH}
else
   LD_LIBRARY_PATH=+\$PWD
fi
export LD_LIBRARY_PATH=\$LD_LIBRARY_PATH
java -Xmx1024m -Djava.util.logging.config.file=logging.properties -jar ${fatJar.archiveName} \${1+"\$@"} &
echo \$! > juebox.pid
"""
   }
}

task archiveZip(type: Zip) {
   dependsOn fatJar, createScripts

   from outputDir
   include '*.jar'
   include '*.xml'
   include 'logging.properties'
   include '*.sh'
   archiveFileName = "se.qxx.jukebox-${jukeboxVersion}.zip"
   destinationDirectory = outputDir
}
